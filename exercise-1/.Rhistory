# What was the most efficient Honda model of 1995?
View(dplyr)
View(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, makes)
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
View(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
man_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
sort_hwy <- arrange(vehicles, hwy)
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
df <- mutate(vehicles, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
new_df <- filter(df, drive == "2-Wheel Drive", cty > 20)
View(new_df)
install.packages("nycflights13")
library(nycflights13)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
install.packages("dplyr")
library("dplyr")
View(flights)
mutate(flights, time_lost <- arr_delay - dep_delay)
flights_filtered <- mutate(flights, time_lost <- arr_delay - dep_delay)
View(flights_filtered)
flights_filtered <- mutate(flights, time_lost = arr_delay - dep_delay)
View(flights_filtered)
flights_alt <- desc(flights_alt, time_lost)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_lost))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_arr <- arrange(flights_alt, desc(time_lost))
flights_alt <- mutate(flights, time_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_lost))
flights_alt <- mutate(flights, time_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_lost))
View(flights_alt)
flight %>%
mutate(time_lost = arr_delay - dep_delay) %>%
arrange(desc(time_lost))
flights_pipe <- flights %>%
mutate(time_lost = arr_delay - dep_delay) %>%
arrange(desc(time_lost))
View(flights_pipe)
View(flights_pipe)
install.packages("nycflights13")
library(nycflights13)
flights_alt <- mutate(flights, time_lost = arr_delay - dep_delay)
View(flights_alt)
flights_alt <- arrange(flights_alt, desc(time_lost))
View(flights_alt)
flights_alt <- mutate(flights, time_lost = arr_delay - dep_delay)
View(flights_alt)
flights_sorted <- arrange(flights_alt, desc(time_lost))
View(flights_sorted)
flights_alt <- mutate(flights, time_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_lost))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_pipe <- flights %>%
mutate(time_lost = arr_delay - dep_delay) %>%
arrange(desc(time_lost))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_pipe)
View(flights_alt)
View(flights_pipe)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_alt$time_gained)
flights_alt <- mutate(flights, time_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_gained))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_pipe <- flights %>%
mutate(time_gained = arr_delay - dep_delay) %>%
arrange(desc(time_gained))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_alt$time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_alt$time_gained)
mean(flights_alt$time_gained, na.rm = T)
jfk_sea <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
View(jfk_sea)
sea <- flights_alt %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained)
summarize(jfk_sea, mean = mean(time_gained, na.rm = T))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_time = mean(time)gained, na.rm = T),
summary <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_time = mean(time_gained, na.rm = T,
min_time = min(time_gained, na.rm = T,
max_time = max(time_gained, na.rm = T)
summary <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_time = mean(time_gained, na.rm = T),
min_time = min(time_gained, na.rm = T),
max_time = max(time_gained, na.rm = T))
# Exercise 4: practicing with dplyr
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
dim(flights)
colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
install.packages("dplyr")
library("dplyr")
flights_alt <- mutate(flights, time_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_gained))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_pipe <- flights %>%
mutate(time_gained = arr_delay - dep_delay) %>%
arrange(desc(time_gained))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_alt$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights_alt$time_gained, na.rm = T)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights_alt %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained)
# On average, did flights to SeaTac gain or loose time?
summarize(jfk_sea, mean = mean(time_gained, na.rm = T))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_time = mean(time_gained, na.rm = T),
min_time = min(time_gained, na.rm = T),
max_time = max(time_gained, na.rm = T))
flights_alt <- mutate(flights, time_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights_alt <- arrange(flights_alt, desc(time_gained))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_pipe <- flights %>%
mutate(time_gained = arr_delay - dep_delay) %>%
arrange(desc(time_gained))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_alt$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights_alt$time_gained, na.rm = T)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights_alt %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained)
# On average, did flights to SeaTac gain or loose time?
summarize(jfk_sea, mean = mean(time_gained, na.rm = T))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- flights_alt %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(avg_time = mean(time_gained, na.rm = T),
min_time = min(time_gained, na.rm = T),
max_time = max(time_gained, na.rm = T))
View(summary)
library(nycflights13)
library(dplyr)
View(flights)
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
# Extract the "text" of the response usin the `content` function
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
# Extract the "text" of the response usin the `content` function
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
setwd("~/info201/ch11-apis/exercise-1")
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
# Extract the "text" of the response usin the `content` function
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- 'orgs/info201/repos'
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
url_request <- GET(paste(base_uri, resource))
# Extract the "text" of the response usin the `content` function
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- 'orgs/info201/repos'
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
url_request <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- 'orgs/info201/repos'
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
text <- content(response, "text")
# Convert the body from JSON into a data frame
# How many (public) repositories does the organization have?
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
base_uri <- "https://api.github.com"
resource <- 'orgs/info201/repos'
response <- GET(paste0(base_uri, resource))
resource <- "orgs/info201/repos"
response <- GET(paste0(base_uri, resource))
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
text <- content(response, "text")
# Convert the body from JSON into a data frame
repo_df <- fromJSON(body)
# How many (public) repositories does the organization have?
num_repos <- nrow(repo_df)
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
text <- content(response, "text")
# Convert the body from JSON into a data frame
repo_df <- fromJSON(body)
# How many (public) repositories does the organization have?
num_repos <- nrow(repo_df)
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
# Exercise 1: reading and querying a web API
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
text <- content(response, "text")
# Convert the body from JSON into a data frame
repo_df <- fromJSON(text)
# How many (public) repositories does the organization have?
num_repos <- nrow(repo_df)
##### New query ######
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
# Send a GET request to this endpoint--including your params list as the `query`
# Extract the response body and convert it from JSON.
# How many search repos did your search find? (Hint: check the list names)
# What are the full names of the top 5 results?
View(repo_df)
resource <- '/search/repositories'
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+language:R")
query_params <- list(q = "graphics:R")
